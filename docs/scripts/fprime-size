#!/usr/bin/python3
import sys
import os
import subprocess

ROOT_USER = os.path.expanduser('~')
PROJECT_ROOT = os.getcwd()
BUILD_ARTIFACTS = f'{PROJECT_ROOT}/build-artifacts'

# Supported Arduino Toolchain paths
# =======================================================================
toolchains = {
    'featherM0': f'{ROOT_USER}/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/bin/arm-none-eabi',
    'teensy40': f'{ROOT_USER}/.arduino15/packages/teensy/tools/teensy-compile/11.3.1/arm/bin/arm-none-eabi',
    'teensy41': f'{ROOT_USER}/.arduino15/packages/teensy/tools/teensy-compile/11.3.1/arm/bin/arm-none-eabi',
}
# =======================================================================

def main(argc, argv):

    # Check arguments for build name
    if argc != 2:
        print('Specify build. (i.e. $ python3 size.py teensy41)')
        return
    build = argv[1]

    # Check if build is supported for size checking
    if not build in toolchains.keys():
        print(f'ERROR: Size check for {build} not yet supported! Exiting...')
        return

    SIZE_UTIL_EXECS = toolchains[build]

    # Check if build exists
    if not os.path.exists(f'{BUILD_ARTIFACTS}/{build}'):
        print('Build not found. Maybe try running:')
        print(f'  fprime-util build {build}')
        return

    for deployment in os.listdir(f'{BUILD_ARTIFACTS}/{build}'):
        print('\n\n\n')
        print('=========================================')
        print(f'       Deployment: {deployment}         ')
        print('=========================================')

        BIN = f'{BUILD_ARTIFACTS}/{build}/{deployment}/bin/{deployment}'

        print_component_size(deployment, SIZE_UTIL_EXECS, BIN)
        print_channel_size(f'{BUILD_ARTIFACTS}/{build}/{deployment}/dict/{deployment}TopologyAppDictionary.xml')
        print_command_size(f'{BUILD_ARTIFACTS}/{build}/{deployment}/dict/{deployment}TopologyAppDictionary.xml')
        print_build_size(build, SIZE_UTIL_EXECS, BIN)


# Print Size of Components
def print_component_size(deployment, util_path, bin_path):
    print('------------------------------')
    print(f'    Size for F\' Components   ')
    print('------------------------------')
    p1 = subprocess.Popen([f'{util_path}-nm', bin_path, '-CStd'], stdout=subprocess.PIPE)
    p2 = subprocess.Popen(['grep', f'{deployment}::'], stdin=p1.stdout, stdout=subprocess.PIPE)
    p3 = subprocess.Popen(['sort', '-k2'], stdin=p2.stdout, stdout=subprocess.PIPE)
    output = subprocess.check_output(['grep', ' B '], stdin=p3.stdout)

    output_arr = output.decode('utf-8').strip().split()
    print('.bss (Bytes)\tComponent', end='')
    for i in range(len(output_arr)):
        if i % 4 != 0 and i % 2 != 0:
            if output_arr[i].isnumeric():
                print(int(output_arr[i]), end='\t\t')
            else:
                print(output_arr[i], end='\t')
        elif i % 4 == 0:
            print()

# Print Size of Telemetry Channels
def print_channel_size(xml_path):
    print('\n\n----------------------------------')
    print(f'    Minimum F\' Configurations   ')
    print('----------------------------------')
    p1 = subprocess.Popen(['cat', xml_path], stdout=subprocess.PIPE)
    p2 = subprocess.Popen(['grep', '<channel '], stdin=p1.stdout, stdout=subprocess.PIPE)
    output = subprocess.check_output(['wc', '-l'], stdin=p2.stdout)

    # Find unique components
    p1 = subprocess.Popen(['cat', xml_path], stdout=subprocess.PIPE)
    p2 = subprocess.check_output(['grep', '<channel '], stdin=p1.stdout)
    output_arr = p2.decode('utf-8').strip().split()
    unique_components = []
    for item in output_arr:
        if item.find('component=') == 0 and not item[11:len(item) - 1] in unique_components:
            unique_components.append(item[11:len(item) - 1])

    # Ignore commQueue
    print(f'=== Number of Telemetry Channel Hash Slots ({PROJECT_ROOT}/config/TlmChanImplCfg.hpp:45)')
    print(f'\t- TLMCHAN_NUM_TLM_HASH_SLOTS = {len(unique_components) - 1}')

    # Ignore 15 - CPU Cores
    # Ignore 2  - commQueue
    print(f'=== Number of Telemetry Channel Buckets ({PROJECT_ROOT}/config/TlmChanImplCfg.hpp:50)')
    print(f'\t- TLMCHAN_HASH_BUCKETS = {int(output.decode("utf-8").strip()) - 17}')

# Print Size of Commands
def print_command_size(xml_path):
    p1 = subprocess.Popen(['cat', xml_path], stdout=subprocess.PIPE)
    p2 = subprocess.Popen(['grep', '<command '], stdin=p1.stdout, stdout=subprocess.PIPE)
    output = subprocess.check_output(['wc', '-l'], stdin=p2.stdout)

    print(f'=== Number of Commands ({PROJECT_ROOT}/config/CommandDispatcherImplCfg.hpp:14)')
    print(f'\t- CMD_DISPATCHER_DISPATCH_TABLE_SIZE = {output.decode("utf-8").strip()}')

# Print Size of Entire Build
def print_build_size(build, util_path, bin_path):
    print('\n------------------------------')
    print(f'    Size for {build}')
    print('------------------------------')

    subprocess.run([f'{util_path}-size', bin_path])

if __name__ == '__main__':
    main(len(sys.argv), sys.argv)
    
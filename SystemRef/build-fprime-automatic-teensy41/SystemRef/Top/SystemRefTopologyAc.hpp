// ======================================================================
// \title  SystemRefTopologyAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for SystemRef topology
// ======================================================================

#ifndef SystemRef_SystemRefTopologyAc_HPP
#define SystemRef_SystemRefTopologyAc_HPP

#include "Arduino/ArduinoTime/ArduinoTimeImpl.hpp"
#include "Arduino/Drv/GpioDriver/GpioDriver.hpp"
#include "Arduino/Drv/HardwareRateDriver/HardwareRateDriver.hpp"
#include "Arduino/Drv/SerialDriver/SerialDriver.hpp"
#include "Drv/BlockDriver/BlockDriver.hpp"
#include "Svc/ActiveLogger/ActiveLogger.hpp"
#include "Svc/ActiveRateGroup/ActiveRateGroup.hpp"
#include "Svc/AssertFatalAdapter/AssertFatalAdapter.hpp"
#include "Svc/BufferManager/BufferManager.hpp"
#include "Svc/CmdDispatcher/CommandDispatcher.hpp"
#include "Svc/CmdSequencer/CmdSequencer.hpp"
#include "Svc/ComStub/ComStub.hpp"
#include "Svc/Deframer/Deframer.hpp"
#include "Svc/FatalHandler/FatalHandler.hpp"
#include "Svc/FileDownlink/FileDownlink.hpp"
#include "Svc/FileManager/FileManager.hpp"
#include "Svc/FileUplink/FileUplink.hpp"
#include "Svc/Framer/Framer.hpp"
#include "Svc/PassiveConsoleTextLogger/PassiveTextLogger.hpp"
#include "Svc/RateGroupDriver/RateGroupDriver.hpp"
#include "Svc/StaticMemory/StaticMemory.hpp"
#include "Svc/SystemResources/SystemResources.hpp"
#include "Svc/TlmChan/TlmChan.hpp"
#include "SystemRef/LedBlinker/LedBlinker.hpp"
#include "SystemRef/Top/SystemRefTopologyDefs.hpp"

namespace SystemRef {

  // ----------------------------------------------------------------------
  // Constants
  // ----------------------------------------------------------------------

  namespace BaseIds {
    enum {
      blockDrv = 0x100,
      rateGroup1 = 0x200,
      cmdDisp = 0x500,
      cmdSeq = 0x600,
      fileDownlink = 0x700,
      fileManager = 0x800,
      fileUplink = 0x900,
      eventLogger = 0xB00,
      tlmSend = 0xC00,
      blinker = 0xF00,
      commDriver = 0x4000,
      downlink = 0x4100,
      fatalAdapter = 0x4200,
      fatalHandler = 0x4300,
      fileUplinkBufferManager = 0x4400,
      systemTime = 0x4500,
      rateGroupDriver = 0x4600,
      staticMemory = 0x4700,
      textLogger = 0x4800,
      uplink = 0x4900,
      systemResources = 0x4A00,
      rateDriver = 0x4C00,
      gpioDriver = 0x4D00,
      comm = 0x5000,
    };
  }

  namespace InstanceIds {
    enum {
      blinker,
      blockDrv,
      cmdDisp,
      cmdSeq,
      comm,
      commDriver,
      downlink,
      eventLogger,
      fatalAdapter,
      fatalHandler,
      fileDownlink,
      fileManager,
      fileUplink,
      fileUplinkBufferManager,
      gpioDriver,
      rateDriver,
      rateGroup1,
      rateGroupDriver,
      staticMemory,
      systemResources,
      systemTime,
      textLogger,
      tlmSend,
      uplink,
    };
  }

  namespace Priorities {
    enum {
      blinker = 95,
      blockDrv = 140,
      cmdDisp = 101,
      cmdSeq = 100,
      eventLogger = 98,
      fileDownlink = 100,
      fileManager = 100,
      fileUplink = 100,
      rateGroup1 = 120,
      tlmSend = 97,
    };
  }

  namespace QueueSizes {
    enum {
      blinker = 10,
      blockDrv = 10,
      cmdDisp = 20,
      cmdSeq = 10,
      eventLogger = 10,
      fileDownlink = 30,
      fileManager = 30,
      fileUplink = 30,
      rateGroup1 = 10,
      tlmSend = 10,
    };
  }

  namespace StackSizes {
    enum {
      blinker = 65536,
      blockDrv = 65536,
      cmdDisp = 65536,
      cmdSeq = 65536,
      eventLogger = 65536,
      fileDownlink = 65536,
      fileManager = 65536,
      fileUplink = 65536,
      rateGroup1 = 65536,
      tlmSend = 65536,
    };
  }

  namespace TaskIds {
    enum {
      blinker,
      blockDrv,
      cmdDisp,
      cmdSeq,
      eventLogger,
      fileDownlink,
      fileManager,
      fileUplink,
      rateGroup1,
      tlmSend,
    };
  }

  // ----------------------------------------------------------------------
  // Component instances
  // ----------------------------------------------------------------------

  //! blinker
  extern LedBlinker blinker;

  //! blockDrv
  extern Drv::BlockDriver blockDrv;

  //! cmdDisp
  extern Svc::CommandDispatcher cmdDisp;

  //! cmdSeq
  extern Svc::CmdSequencer cmdSeq;

  //! comm
  extern Svc::ComStub comm;

  //! commDriver
  extern Arduino::SerialDriver commDriver;

  //! downlink
  extern Svc::Framer downlink;

  //! eventLogger
  extern Svc::ActiveLogger eventLogger;

  //! fatalAdapter
  extern Svc::AssertFatalAdapter fatalAdapter;

  //! fatalHandler
  extern Svc::FatalHandler fatalHandler;

  //! fileDownlink
  extern Svc::FileDownlink fileDownlink;

  //! fileManager
  extern Svc::FileManager fileManager;

  //! fileUplink
  extern Svc::FileUplink fileUplink;

  //! fileUplinkBufferManager
  extern Svc::BufferManager fileUplinkBufferManager;

  //! gpioDriver
  extern Arduino::GpioDriver gpioDriver;

  //! rateDriver
  extern Arduino::HardwareRateDriver rateDriver;

  //! rateGroup1
  extern Svc::ActiveRateGroup rateGroup1;

  //! rateGroupDriver
  extern Svc::RateGroupDriver rateGroupDriver;

  //! staticMemory
  extern Svc::StaticMemory staticMemory;

  //! systemResources
  extern Svc::SystemResources systemResources;

  //! systemTime
  extern Svc::ArduinoTimeImpl systemTime;

  //! textLogger
  extern Svc::PassiveTextLogger textLogger;

  //! tlmSend
  extern Svc::TlmChan tlmSend;

  //! uplink
  extern Svc::Deframer uplink;

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  //! Initialize components
  void initComponents(
      const TopologyState& state //!< The topology state
  );

  //! Set component base Ids
  void setBaseIds();

  //! Connect components
  void connectComponents();

  //! Register commands
  void regCommands();

  //! Load parameters
  void loadParameters();

  //! Start tasks
  void startTasks(
      const TopologyState& state //!< The topology state
  );

  //! Stop tasks
  void stopTasks(
      const TopologyState& state //!< The topology state
  );

  //! Free threads
  void freeThreads(
      const TopologyState& state //!< The topology state
  );

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  //! Set up the topology
  void setup(
      const TopologyState& state //!< The topology state
  );

  //! Tear down the topology
  void teardown(
      const TopologyState& state //!< The topology state
  );

}

#endif

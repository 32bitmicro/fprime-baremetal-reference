// ======================================================================
// \title  SystemRefTopologyAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for SystemRef topology
// ======================================================================

#include "SystemRef/Top/SystemRefTopologyAc.hpp"

namespace SystemRef {


  // ----------------------------------------------------------------------
  // Component instances
  // ----------------------------------------------------------------------

  LedBlinker blinker(FW_OPTIONAL_NAME("blinker"));

  Drv::BlockDriver blockDrv(FW_OPTIONAL_NAME("blockDrv"));

  Svc::CommandDispatcher cmdDisp(FW_OPTIONAL_NAME("cmdDisp"));

  Svc::CmdSequencer cmdSeq(FW_OPTIONAL_NAME("cmdSeq"));

  Svc::ComStub comm(FW_OPTIONAL_NAME("comm"));

  Arduino::SerialDriver commDriver(FW_OPTIONAL_NAME("commDriver"));

  Svc::Framer downlink(FW_OPTIONAL_NAME("downlink"));

  Svc::ActiveLogger eventLogger(FW_OPTIONAL_NAME("eventLogger"));

  Svc::AssertFatalAdapter fatalAdapter(FW_OPTIONAL_NAME("fatalAdapter"));

  Svc::FatalHandler fatalHandler(FW_OPTIONAL_NAME("fatalHandler"));

  Svc::FileDownlink fileDownlink(FW_OPTIONAL_NAME("fileDownlink"));

  Svc::FileManager fileManager(FW_OPTIONAL_NAME("fileManager"));

  Svc::FileUplink fileUplink(FW_OPTIONAL_NAME("fileUplink"));

  Svc::BufferManager fileUplinkBufferManager(FW_OPTIONAL_NAME("fileUplinkBufferManager"));

  Arduino::GpioDriver gpioDriver(FW_OPTIONAL_NAME("gpioDriver"));

  Arduino::HardwareRateDriver rateDriver(FW_OPTIONAL_NAME("rateDriver"));

  Svc::ActiveRateGroup rateGroup1(FW_OPTIONAL_NAME("rateGroup1"));

  Svc::RateGroupDriver rateGroupDriver(FW_OPTIONAL_NAME("rateGroupDriver"));

  Svc::StaticMemory staticMemory(FW_OPTIONAL_NAME("staticMemory"));

  Svc::SystemResources systemResources(FW_OPTIONAL_NAME("systemResources"));

  Svc::ArduinoTimeImpl systemTime(FW_OPTIONAL_NAME("systemTime"));

  Svc::PassiveTextLogger textLogger(FW_OPTIONAL_NAME("textLogger"));

  Svc::TlmChan tlmSend(FW_OPTIONAL_NAME("tlmSend"));

  Svc::Deframer uplink(FW_OPTIONAL_NAME("uplink"));

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  void initComponents(const TopologyState& state) {
    blinker.init(QueueSizes::blinker, InstanceIds::blinker);
    blockDrv.init(QueueSizes::blockDrv, InstanceIds::blockDrv);
    cmdDisp.init(QueueSizes::cmdDisp, InstanceIds::cmdDisp);
    cmdSeq.init(QueueSizes::cmdSeq, InstanceIds::cmdSeq);
    comm.init(InstanceIds::comm);
    commDriver.init(InstanceIds::commDriver);
    downlink.init(InstanceIds::downlink);
    eventLogger.init(QueueSizes::eventLogger, InstanceIds::eventLogger);
    fatalAdapter.init(InstanceIds::fatalAdapter);
    fatalHandler.init(InstanceIds::fatalHandler);
    fileDownlink.init(QueueSizes::fileDownlink, InstanceIds::fileDownlink);
    fileManager.init(QueueSizes::fileManager, InstanceIds::fileManager);
    fileUplink.init(QueueSizes::fileUplink, InstanceIds::fileUplink);
    fileUplinkBufferManager.init(InstanceIds::fileUplinkBufferManager);
    gpioDriver.init(InstanceIds::gpioDriver);
    rateDriver.init(InstanceIds::rateDriver);
    rateGroup1.init(QueueSizes::rateGroup1, InstanceIds::rateGroup1);
    rateGroupDriver.init(InstanceIds::rateGroupDriver);
    staticMemory.init(InstanceIds::staticMemory);
    systemResources.init(InstanceIds::systemResources);
    systemTime.init(InstanceIds::systemTime);
    textLogger.init(InstanceIds::textLogger);
    tlmSend.init(QueueSizes::tlmSend, InstanceIds::tlmSend);
    uplink.init(InstanceIds::uplink);
  }

  void setBaseIds() {
    blockDrv.setIdBase(BaseIds::blockDrv);
    rateGroup1.setIdBase(BaseIds::rateGroup1);
    cmdDisp.setIdBase(BaseIds::cmdDisp);
    cmdSeq.setIdBase(BaseIds::cmdSeq);
    fileDownlink.setIdBase(BaseIds::fileDownlink);
    fileManager.setIdBase(BaseIds::fileManager);
    fileUplink.setIdBase(BaseIds::fileUplink);
    eventLogger.setIdBase(BaseIds::eventLogger);
    tlmSend.setIdBase(BaseIds::tlmSend);
    blinker.setIdBase(BaseIds::blinker);
    commDriver.setIdBase(BaseIds::commDriver);
    downlink.setIdBase(BaseIds::downlink);
    fatalAdapter.setIdBase(BaseIds::fatalAdapter);
    fatalHandler.setIdBase(BaseIds::fatalHandler);
    fileUplinkBufferManager.setIdBase(BaseIds::fileUplinkBufferManager);
    systemTime.setIdBase(BaseIds::systemTime);
    rateGroupDriver.setIdBase(BaseIds::rateGroupDriver);
    staticMemory.setIdBase(BaseIds::staticMemory);
    textLogger.setIdBase(BaseIds::textLogger);
    uplink.setIdBase(BaseIds::uplink);
    systemResources.setIdBase(BaseIds::systemResources);
    rateDriver.setIdBase(BaseIds::rateDriver);
    gpioDriver.setIdBase(BaseIds::gpioDriver);
    comm.setIdBase(BaseIds::comm);
  }

  void connectComponents() {

    // Command
    cmdDisp.set_compCmdSend_OutputPort(
        0,
        blinker.get_cmdIn_InputPort(0)
    );
    cmdDisp.set_compCmdSend_OutputPort(
        1,
        cmdDisp.get_CmdDisp_InputPort(0)
    );
    cmdDisp.set_compCmdSend_OutputPort(
        2,
        cmdSeq.get_cmdIn_InputPort(0)
    );
    cmdDisp.set_compCmdSend_OutputPort(
        3,
        eventLogger.get_CmdDisp_InputPort(0)
    );
    cmdDisp.set_compCmdSend_OutputPort(
        4,
        fileDownlink.get_cmdIn_InputPort(0)
    );
    cmdDisp.set_compCmdSend_OutputPort(
        5,
        fileManager.get_cmdIn_InputPort(0)
    );
    cmdDisp.set_compCmdSend_OutputPort(
        6,
        systemResources.get_CmdDisp_InputPort(0)
    );

    // CommandRegistration
    blinker.set_cmdRegOut_OutputPort(
        0,
        cmdDisp.get_compCmdReg_InputPort(0)
    );
    cmdDisp.set_CmdReg_OutputPort(
        0,
        cmdDisp.get_compCmdReg_InputPort(1)
    );
    cmdSeq.set_cmdRegOut_OutputPort(
        0,
        cmdDisp.get_compCmdReg_InputPort(2)
    );
    eventLogger.set_CmdReg_OutputPort(
        0,
        cmdDisp.get_compCmdReg_InputPort(3)
    );
    fileDownlink.set_cmdRegOut_OutputPort(
        0,
        cmdDisp.get_compCmdReg_InputPort(4)
    );
    fileManager.set_cmdRegOut_OutputPort(
        0,
        cmdDisp.get_compCmdReg_InputPort(5)
    );
    systemResources.set_CmdReg_OutputPort(
        0,
        cmdDisp.get_compCmdReg_InputPort(6)
    );

    // CommandResponse
    blinker.set_cmdResponseOut_OutputPort(
        0,
        cmdDisp.get_compCmdStat_InputPort(0)
    );
    cmdDisp.set_CmdStatus_OutputPort(
        0,
        cmdDisp.get_compCmdStat_InputPort(0)
    );
    cmdSeq.set_cmdResponseOut_OutputPort(
        0,
        cmdDisp.get_compCmdStat_InputPort(0)
    );
    eventLogger.set_CmdStatus_OutputPort(
        0,
        cmdDisp.get_compCmdStat_InputPort(0)
    );
    fileDownlink.set_cmdResponseOut_OutputPort(
        0,
        cmdDisp.get_compCmdStat_InputPort(0)
    );
    fileManager.set_cmdResponseOut_OutputPort(
        0,
        cmdDisp.get_compCmdStat_InputPort(0)
    );
    systemResources.set_CmdStatus_OutputPort(
        0,
        cmdDisp.get_compCmdStat_InputPort(0)
    );

    // Downlink
    commDriver.set_deallocate_OutputPort(
        0,
        staticMemory.get_bufferDeallocate_InputPort(0)
    );
    downlink.set_bufferDeallocate_OutputPort(
        0,
        fileDownlink.get_bufferReturn_InputPort(0)
    );
    downlink.set_framedAllocate_OutputPort(
        0,
        staticMemory.get_bufferAllocate_InputPort(0)
    );
    downlink.set_framedOut_OutputPort(
        0,
        commDriver.get_send_InputPort(0)
    );
    eventLogger.set_PktSend_OutputPort(
        0,
        downlink.get_comIn_InputPort(0)
    );
    fileDownlink.set_bufferSendOut_OutputPort(
        0,
        downlink.get_bufferIn_InputPort(0)
    );
    tlmSend.set_PktSend_OutputPort(
        0,
        downlink.get_comIn_InputPort(0)
    );

    // Events
    blinker.set_logOut_OutputPort(
        0,
        eventLogger.get_LogRecv_InputPort(0)
    );
    cmdDisp.set_Log_OutputPort(
        0,
        eventLogger.get_LogRecv_InputPort(0)
    );
    cmdSeq.set_logOut_OutputPort(
        0,
        eventLogger.get_LogRecv_InputPort(0)
    );
    eventLogger.set_Log_OutputPort(
        0,
        eventLogger.get_LogRecv_InputPort(0)
    );
    fatalAdapter.set_Log_OutputPort(
        0,
        eventLogger.get_LogRecv_InputPort(0)
    );
    fileDownlink.set_eventOut_OutputPort(
        0,
        eventLogger.get_LogRecv_InputPort(0)
    );
    fileManager.set_eventOut_OutputPort(
        0,
        eventLogger.get_LogRecv_InputPort(0)
    );
    fileUplink.set_eventOut_OutputPort(
        0,
        eventLogger.get_LogRecv_InputPort(0)
    );
    fileUplinkBufferManager.set_eventOut_OutputPort(
        0,
        eventLogger.get_LogRecv_InputPort(0)
    );
    rateGroup1.set_Log_OutputPort(
        0,
        eventLogger.get_LogRecv_InputPort(0)
    );
    systemResources.set_Log_OutputPort(
        0,
        eventLogger.get_LogRecv_InputPort(0)
    );

    // FaultProtection
    eventLogger.set_FatalAnnounce_OutputPort(
        0,
        fatalHandler.get_FatalReceive_InputPort(0)
    );

    // RateGroups
    blockDrv.set_CycleOut_OutputPort(
        0,
        rateGroupDriver.get_CycleIn_InputPort(0)
    );
    rateGroup1.set_RateGroupMemberOut_OutputPort(
        0,
        commDriver.get_schedIn_InputPort(0)
    );
    rateGroup1.set_RateGroupMemberOut_OutputPort(
        1,
        blinker.get_run_InputPort(0)
    );
    rateGroup1.set_RateGroupMemberOut_OutputPort(
        2,
        tlmSend.get_Run_InputPort(0)
    );
    rateGroup1.set_RateGroupMemberOut_OutputPort(
        3,
        systemResources.get_run_InputPort(0)
    );
    rateGroup1.set_RateGroupMemberOut_OutputPort(
        4,
        cmdSeq.get_schedIn_InputPort(0)
    );
    rateGroupDriver.set_CycleOut_OutputPort(
        0,
        rateGroup1.get_CycleIn_InputPort(0)
    );

    // Sequencer
    cmdDisp.set_seqCmdStatus_OutputPort(
        0,
        cmdSeq.get_cmdResponseIn_InputPort(0)
    );
    cmdSeq.set_comCmdOut_OutputPort(
        0,
        cmdDisp.get_seqCmdBuff_InputPort(0)
    );

    // SystemRef
    blinker.set_gpioSet_OutputPort(
        0,
        gpioDriver.get_gpioWrite_InputPort(0)
    );

    // Telemetry
    blinker.set_tlmOut_OutputPort(
        0,
        tlmSend.get_TlmRecv_InputPort(0)
    );
    blockDrv.set_Tlm_OutputPort(
        0,
        tlmSend.get_TlmRecv_InputPort(0)
    );
    cmdDisp.set_Tlm_OutputPort(
        0,
        tlmSend.get_TlmRecv_InputPort(0)
    );
    cmdSeq.set_tlmOut_OutputPort(
        0,
        tlmSend.get_TlmRecv_InputPort(0)
    );
    fileDownlink.set_tlmOut_OutputPort(
        0,
        tlmSend.get_TlmRecv_InputPort(0)
    );
    fileManager.set_tlmOut_OutputPort(
        0,
        tlmSend.get_TlmRecv_InputPort(0)
    );
    fileUplink.set_tlmOut_OutputPort(
        0,
        tlmSend.get_TlmRecv_InputPort(0)
    );
    fileUplinkBufferManager.set_tlmOut_OutputPort(
        0,
        tlmSend.get_TlmRecv_InputPort(0)
    );
    rateGroup1.set_Tlm_OutputPort(
        0,
        tlmSend.get_TlmRecv_InputPort(0)
    );
    systemResources.set_Tlm_OutputPort(
        0,
        tlmSend.get_TlmRecv_InputPort(0)
    );

    // TextEvents
    blinker.set_logTextOut_OutputPort(
        0,
        textLogger.get_TextLogger_InputPort(0)
    );
    cmdDisp.set_LogText_OutputPort(
        0,
        textLogger.get_TextLogger_InputPort(0)
    );
    cmdSeq.set_LogText_OutputPort(
        0,
        textLogger.get_TextLogger_InputPort(0)
    );
    eventLogger.set_LogText_OutputPort(
        0,
        textLogger.get_TextLogger_InputPort(0)
    );
    fatalAdapter.set_LogText_OutputPort(
        0,
        textLogger.get_TextLogger_InputPort(0)
    );
    fileDownlink.set_textEventOut_OutputPort(
        0,
        textLogger.get_TextLogger_InputPort(0)
    );
    fileManager.set_LogText_OutputPort(
        0,
        textLogger.get_TextLogger_InputPort(0)
    );
    fileUplink.set_LogText_OutputPort(
        0,
        textLogger.get_TextLogger_InputPort(0)
    );
    fileUplinkBufferManager.set_textEventOut_OutputPort(
        0,
        textLogger.get_TextLogger_InputPort(0)
    );
    rateGroup1.set_LogText_OutputPort(
        0,
        textLogger.get_TextLogger_InputPort(0)
    );
    systemResources.set_LogText_OutputPort(
        0,
        textLogger.get_TextLogger_InputPort(0)
    );

    // Time
    blinker.set_timeCaller_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );
    blockDrv.set_Time_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );
    cmdDisp.set_Time_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );
    cmdSeq.set_timeCaller_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );
    eventLogger.set_Time_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );
    fatalAdapter.set_Time_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );
    fileDownlink.set_timeCaller_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );
    fileManager.set_timeCaller_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );
    fileUplink.set_timeCaller_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );
    fileUplinkBufferManager.set_timeCaller_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );
    rateGroup1.set_Time_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );
    systemResources.set_Time_OutputPort(
        0,
        systemTime.get_timeGetPort_InputPort(0)
    );

    // Uplink
    cmdDisp.set_seqCmdStatus_OutputPort(
        1,
        uplink.get_cmdResponseIn_InputPort(0)
    );
    commDriver.set_allocate_OutputPort(
        0,
        staticMemory.get_bufferAllocate_InputPort(1)
    );
    commDriver.set_recv_OutputPort(
        0,
        uplink.get_framedIn_InputPort(0)
    );
    fileUplink.set_bufferSendOut_OutputPort(
        0,
        fileUplinkBufferManager.get_bufferSendIn_InputPort(0)
    );
    uplink.set_bufferAllocate_OutputPort(
        0,
        fileUplinkBufferManager.get_bufferGetCallee_InputPort(0)
    );
    uplink.set_bufferDeallocate_OutputPort(
        0,
        fileUplinkBufferManager.get_bufferSendIn_InputPort(0)
    );
    uplink.set_bufferOut_OutputPort(
        0,
        fileUplink.get_bufferSendIn_InputPort(0)
    );
    uplink.set_comOut_OutputPort(
        0,
        cmdDisp.get_seqCmdBuff_InputPort(1)
    );
    uplink.set_framedDeallocate_OutputPort(
        0,
        staticMemory.get_bufferDeallocate_InputPort(1)
    );
  }

  void regCommands() {
    blinker.regCommands();
    cmdDisp.regCommands();
    cmdSeq.regCommands();
    eventLogger.regCommands();
    fileDownlink.regCommands();
    fileManager.regCommands();
    systemResources.regCommands();
  }

  void loadParameters() {
    blinker.loadParameters();
  }

  void startTasks(const TopologyState& state) {
    blinker.start(
      static_cast<NATIVE_UINT_TYPE>(Priorities::blinker),
      static_cast<NATIVE_UINT_TYPE>(StackSizes::blinker),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<NATIVE_UINT_TYPE>(TaskIds::blinker)
    );
    blockDrv.start(
      static_cast<NATIVE_UINT_TYPE>(Priorities::blockDrv),
      static_cast<NATIVE_UINT_TYPE>(StackSizes::blockDrv),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<NATIVE_UINT_TYPE>(TaskIds::blockDrv)
    );
    cmdDisp.start(
      static_cast<NATIVE_UINT_TYPE>(Priorities::cmdDisp),
      static_cast<NATIVE_UINT_TYPE>(StackSizes::cmdDisp),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<NATIVE_UINT_TYPE>(TaskIds::cmdDisp)
    );
    cmdSeq.start(
      static_cast<NATIVE_UINT_TYPE>(Priorities::cmdSeq),
      static_cast<NATIVE_UINT_TYPE>(StackSizes::cmdSeq),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<NATIVE_UINT_TYPE>(TaskIds::cmdSeq)
    );
    eventLogger.start(
      static_cast<NATIVE_UINT_TYPE>(Priorities::eventLogger),
      static_cast<NATIVE_UINT_TYPE>(StackSizes::eventLogger),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<NATIVE_UINT_TYPE>(TaskIds::eventLogger)
    );
    fileDownlink.start(
      static_cast<NATIVE_UINT_TYPE>(Priorities::fileDownlink),
      static_cast<NATIVE_UINT_TYPE>(StackSizes::fileDownlink),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<NATIVE_UINT_TYPE>(TaskIds::fileDownlink)
    );
    fileManager.start(
      static_cast<NATIVE_UINT_TYPE>(Priorities::fileManager),
      static_cast<NATIVE_UINT_TYPE>(StackSizes::fileManager),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<NATIVE_UINT_TYPE>(TaskIds::fileManager)
    );
    fileUplink.start(
      static_cast<NATIVE_UINT_TYPE>(Priorities::fileUplink),
      static_cast<NATIVE_UINT_TYPE>(StackSizes::fileUplink),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<NATIVE_UINT_TYPE>(TaskIds::fileUplink)
    );
    rateGroup1.start(
      static_cast<NATIVE_UINT_TYPE>(Priorities::rateGroup1),
      static_cast<NATIVE_UINT_TYPE>(StackSizes::rateGroup1),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<NATIVE_UINT_TYPE>(TaskIds::rateGroup1)
    );
    tlmSend.start(
      static_cast<NATIVE_UINT_TYPE>(Priorities::tlmSend),
      static_cast<NATIVE_UINT_TYPE>(StackSizes::tlmSend),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<NATIVE_UINT_TYPE>(TaskIds::tlmSend)
    );
  }

  void stopTasks(const TopologyState& state) {
    blinker.exit();
    blockDrv.exit();
    cmdDisp.exit();
    cmdSeq.exit();
    eventLogger.exit();
    fileDownlink.exit();
    fileManager.exit();
    fileUplink.exit();
    rateGroup1.exit();
    tlmSend.exit();
  }

  void freeThreads(const TopologyState& state) {
    (void) blinker.ActiveComponentBase::join(nullptr);
    (void) blockDrv.ActiveComponentBase::join(nullptr);
    (void) cmdDisp.ActiveComponentBase::join(nullptr);
    (void) cmdSeq.ActiveComponentBase::join(nullptr);
    (void) eventLogger.ActiveComponentBase::join(nullptr);
    (void) fileDownlink.ActiveComponentBase::join(nullptr);
    (void) fileManager.ActiveComponentBase::join(nullptr);
    (void) fileUplink.ActiveComponentBase::join(nullptr);
    (void) rateGroup1.ActiveComponentBase::join(nullptr);
    (void) tlmSend.ActiveComponentBase::join(nullptr);
  }

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  void setup(const TopologyState& state) {
    initComponents(state);
    setBaseIds();
    connectComponents();
    regCommands();
    loadParameters();
    startTasks(state);
  }

  void teardown(const TopologyState& state) {
    stopTasks(state);
    freeThreads(state);
  }

}
